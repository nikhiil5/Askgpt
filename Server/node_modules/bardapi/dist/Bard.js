export class BardAPI {
    sessionId;
    headers = {
        Host: "bard.google.com",
        "X-Same-Domain": "1",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded;charset=UTF-8",
        Origin: "https://bard.google.com",
        Referer: "https://bard.google.com/",
    };
    conversationalData = {
        conversationId: "",
        responseId: "",
        choiceId: "",
    };
    _reqid;
    constructor({ sessionId }) {
        this.sessionId = sessionId;
        this._reqid = Math.floor(Math.random() * 9000) + 1000;
    }
    async get_bard_config() {
        const res = await fetchWithTimeout("https://bard.google.com/", {
            headers: {
                ...this.headers,
                Cookie: `__Secure-1PSID=${this.sessionId}`,
            },
        }, 10000);
        if (res.status !== 200) {
            throw new Error("Could not get Google Bard");
        }
        const data = await res.text();
        const bl = data.match(/"cfb2h":"(.*?)"/)?.[1];
        const at = data.match(/"SNlM0e":"(.*?)"/)?.[1];
        if (!bl || !at) {
            throw new Error("Could not get Google Bard Configuration");
        }
        return { bl, at };
    }
    async ask({ message, previousChoiceId, }) {
        const { bl, at } = await this.get_bard_config();
        const qsParams = new URLSearchParams({
            bl,
            _reqid: this._reqid.toString(),
            rt: "j",
        });
        let { conversationId, responseId, choiceId } = this.conversationalData;
        if (previousChoiceId)
            choiceId = previousChoiceId;
        const messageStruct = [
            [message],
            null,
            [conversationId, responseId, choiceId],
        ];
        const body = {
            "f.req": JSON.stringify([null, JSON.stringify(messageStruct)]),
            at,
        };
        const res = await fetchWithTimeout("https://bard.google.com/_/BardChatUi/data/assistant.lamda.BardFrontendService/StreamGenerate?" +
            qsParams.toString(), {
            method: "POST",
            headers: {
                ...this.headers,
                Cookie: `__Secure-1PSID=${this.sessionId}`,
            },
            body: new URLSearchParams(body).toString(),
        }, 120000);
        const dataBack = await res.text();
        const splitData = JSON.parse(dataBack.split("\n")[2]);
        const chatData = JSON.parse(splitData[0][0][2]);
        if (!chatData) {
            throw new Error("BardAPI.ask: Invalid response - no chat data");
        }
        const messageBack = chatData[0][0];
        const conversationIdBack = chatData[1][0];
        const responseIdBack = chatData[1][1];
        const choiceIdBack = chatData[4][0][0];
        this.conversationalData = {
            conversationId: conversationIdBack,
            responseId: responseIdBack,
            choiceId: choiceIdBack,
        };
        return {
            response: messageBack,
            conversationId: conversationIdBack,
            responseId: responseIdBack,
            choiceId: choiceIdBack,
            otherChoices: chatData[4].map((choice) => ({
                choiceId: choice[0],
                message: choice[1],
            })),
        };
    }
    reset() {
        this.conversationalData = {
            conversationId: "",
            responseId: "",
            choiceId: "",
        };
    }
}
async function fetchWithTimeout(url, opts, timeout) {
    const signal = AbortSignal.timeout(timeout);
    const _fetchPromise = fetch(url, {
        ...opts,
        signal,
    });
    const result = await _fetchPromise;
    return result;
}
